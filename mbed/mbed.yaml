# The MIT License (MIT)
#
# Copyright (c) 2016 Colin Hogben
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

name: mbed
include:
  - '"mbed.h"'
sections:
  -
    functions:
      wait:
        condition: MICROPY_PY_BUILTINS_FLOAT
        args:
          - s float
      wait_ms:
        args:
          - ms int
      wait_us:
        args:
          - us int
      us_ticker_read:
        ret: int
  -
    condition: MICROPY_MBED_ANALOGIN
    classes:
      AnalogIn:
        args:
          - pin int?cast=PinName
        methods:
          read:
            ret: float
          read_u16:
            ret: int
  -
    condition: MICROPY_MBED_ANALOGOUT
    classes:
      AnalogOut:
        args:
          - pin int?cast=PinName
        methods:
          write:
            args:
              - value float
          write_u16:
            args:
              - value int?cast=uint16_t
          read:
            ret: float
  -
    condition: MICROPY_MBED_DIGITALIN
    classes:
      DigitalIn:
        args:
          - pin int?cast=PinName
          - mode int?default=PullDefault;cast=PinMode
        methods:
          read:
            ret: int
          mode:
            args:
              - mode int?cast=PinMode
          is_connected:
            ret: bool
    constants:
      PullNone: int
      PullUp: int
      PullDown: int
      PullDefault: int
  -
    condition: MICROPY_MBED_DIGITALOUT
    classes:
      DigitalOut:
        args:
          - pin int?cast=PinName
        methods:
          write:
            args:
              - value int
          read:
            ret: int
          is_connected:
            ret: bool
  -
    condition: MICROPY_MBED_I2C
    classes:
      I2C:
        args:
          - sda int?cast=PinName
          - scl int?cast=PinName
        methods:
          frequency:
            args:
              - hz int
          read:
            args:
              - address int
              - size int
              - repeated bool?default=false
            code:
              - "vstr_t buf_v;"
              - "vstr_init_len(&buf_v, size);"
              - "mp_obj_t res[2];"
              - "int ret = self->cpp->read(address, buf_v.buf, buf_v.len, repeated);"
              - "res[0] = MP_OBJ_NEW_SMALL_INT(ret);"
              - "if (ret <= 0) {"
              - "    res[1] = mp_const_empty_bytes;"
              - "} else {"
              - "    buf_v.len = ret;"
              - "    res[1] = mp_obj_new_str_from_vstr(&mp_type_bytes, &buf_v);"
              - "}"
              - "return mp_obj_new_tuple(2, res);"
            ret: int
          read1:
            cppname: read
            args:
              - ack int
            ret: int
          write:
            args:
              - address int
              - data buffer?cast=char*
              - repeated bool?default=false
            ret: int
          write1:
            cppname: write
            args:
              - data int
            ret: int
          start:
            noargs: 1
          stop:
            noargs: 1
          lock:
            noargs: 1
          unlock:
            noargs: 1
  -
    condition: MICROPY_MBED_PWMOUT
    classes:
      PwmOut:
        args:
          - pin int?cast=PinName
        methods:
          write:
            condition: MICROPY_PY_BUILTINS_FLOAT
            args:
              - value float
          read:
            condition: MICROPY_PY_BUILTINS_FLOAT
            ret: float
          period:
            condition: MICROPY_PY_BUILTINS_FLOAT
            args:
              - s float
          period_ms:
            args:
              - ms int
          period_us:
            args:
              - us int
          pulsewidth:
            condition: MICROPY_PY_BUILTINS_FLOAT
            args:
              - s float
          pulsewidth_ms:
            args:
              - ms int
          pulsewidth_us:
            args:
              - us int
  -
    condition: MICROPY_MBED_SERIAL
    cinclude:
      - '"serial_api.h"'
    classes:
      Serial:
        args:
          - tx int?cast=PinName
          - rx int?cast=PinName
        methods:
          baud:
            args:
              - baud int
          format:
            args:
              - bits int?default=8
              - parity int?default=SerialBase::None;cast=SerialBase::Parity
              - stop_bits int?default=1
          readable:
            ret: bool
          writeable:
            ret: bool
          send_break:
            note: no args or return
          putc:
            args:
              - chr int
          puts:
            args:
              - str string
          getc:
            ret: int
    constants:
      ParityNone: int
      ParityOdd: int
      ParityEven: int
      ParityForced1: int
      ParityForced0: int
      FlowControlNone: int
      FlowControlRTS: int
      FlowControlCTS: int
      FlowControlRTSCTS: int
  -
    condition: MICROPY_MBED_SPI
    classes:
      SPI:
        args:
          - mosi int?cast=PinName
          - miso int?cast=PinName
          - sclk int?cast=PinName
          - ssel int?default=NC;cast=PinName
        methods:
          format:
            args:
              - bits int
              - mode int?default=0
          frequency:
            args:
              - hz int?default=1000000
          write:
            args:
              - value int
            ret: int
          lock:
            noargs: 1
          unlock:
            nnoargs: 1
