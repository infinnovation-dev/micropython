#!/usr/bin/env python
#
# The MIT License (MIT)
#
# Copyright (c) 2016 Colin Hogben
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""
Extract pin names to use as constants in pins module.

Given target name and path to PinNames.h file within mbed library,
extract the { qstr, int } initialisers for a map, with appropriate
#if conditions.
"""
from __future__ import print_function
import re

enumRX = re.compile(r'{([^{}]*?)} PinName', re.DOTALL)
ifsymeqRX = re.compile(r'(?:(#(?:if|elif|else|endif).*)|(\w+)\s*(?:=[^,]+)?,?)', re.MULTILINE)
c_commentRX = re.compile(r'/\*.*?\*/', re.DOTALL)
cpp_commentRX = re.compile(r'//.*')

def iter_pins(filename):
    """Extract pin names from header, with preprocessing conditionals."""
    with open(filename) as f:
        content = f.read()
    m = enumRX.search(content)
    if not m:
        raise Exception("No enum {...} PinName found")
    clause = m.group(1)
    clause, n = c_commentRX.subn('', clause)
    clause, n = cpp_commentRX.subn('', clause)
    # print clause
    for preproc, sym in ifsymeqRX.findall(clause):
        yield preproc, sym

if __name__=='__main__':
    import argparse
    ap = argparse.ArgumentParser()
    ap.add_argument('-d', '--define', action='store_true')
    ap.add_argument('filename', nargs='+')
    args = ap.parse_args()
    if args.define:
        print('// Generated by %s' % ap.prog)
        fmt = '    {{ MP_ROM_QSTR(MP_QSTR_{sym}), MP_ROM_INT({sym}) }},'
        first = True
        for fname in args.filename:
            target, pinnames_h = fname.split(':',1)
            print('#{cond} defined(TARGET_{target})'
                  .format(cond='if' if first else 'elif',
                          target=target))
            for cond, sym in iter_pins(pinnames_h):
                if cond:
                    print(cond)
                else:
                    print(fmt.format(sym=sym))
            first = False
        if not first:
            print('#else // target not explicitly handled')
            for std in ('USBTX','USBRX','LED1','NC'):
                print(fmt.format(sym=std))
            print('#endif')
    else:
        for fname in args.filename:
            for cond, sym in iter_pins(fname):
                if sym:
                    print(sym)
